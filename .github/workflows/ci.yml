name: Ai-semble v2 CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # コード品質チェック
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r tests/requirements.txt
    
    - name: Code formatting check (Black)
      run: black --check --diff containers/
    
    - name: Import sorting check (isort)
      run: isort --check-only --diff containers/
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 containers/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 containers/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Type checking with mypy
      run: mypy containers/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true

  # ユニットテスト
  unit-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt
        pip install -r containers/orchestrator/requirements.txt
        pip install -r containers/data-processor/requirements.txt
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=containers --cov-report=xml --cov-report=term
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # セキュリティスキャン
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # コンテナビルドテスト
  container-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [orchestrator, ai-services/llm, ai-services/vision, ai-services/nlp, data-processor]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build container image
      uses: docker/build-push-action@v5
      with:
        context: containers/${{ matrix.service }}
        platforms: linux/amd64
        push: false
        tags: |
          ai-semble/${{ matrix.service }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 統合テスト（Dockerベース）
  integration-tests:
    runs-on: ubuntu-latest
    needs: [container-build]
    services:
      # データベース等の依存サービスがある場合はここに追加
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build all container images
      run: |
        docker build -t ai-semble/orchestrator:test containers/orchestrator/
        docker build -t ai-semble/llm:test containers/ai-services/llm/
        docker build -t ai-semble/vision:test containers/ai-services/vision/
        docker build -t ai-semble/nlp:test containers/ai-services/nlp/
        docker build -t ai-semble/data-processor:test containers/data-processor/
    
    - name: Create test network
      run: docker network create ai-semble-test
    
    - name: Start test services
      run: |
        # Data Processor
        docker run -d --name data-processor-test --network ai-semble-test \
          -p 8084:8084 ai-semble/data-processor:test
        
        # LLM Service
        docker run -d --name llm-test --network ai-semble-test \
          -p 8081:8081 ai-semble/llm:test
        
        # Vision Service
        docker run -d --name vision-test --network ai-semble-test \
          -p 8082:8082 ai-semble/vision:test
        
        # NLP Service
        docker run -d --name nlp-test --network ai-semble-test \
          -p 8083:8083 ai-semble/nlp:test
        
        # Orchestrator
        docker run -d --name orchestrator-test --network ai-semble-test \
          -p 8080:8080 \
          -e LLM_SERVICE_URL=http://llm-test:8081 \
          -e VISION_SERVICE_URL=http://vision-test:8082 \
          -e NLP_SERVICE_URL=http://nlp-test:8083 \
          -e DATA_PROCESSOR_URL=http://data-processor-test:8084 \
          ai-semble/orchestrator:test
    
    - name: Wait for services to be ready
      run: |
        sleep 30
        # ヘルスチェック
        for i in {1..30}; do
          if curl -f http://localhost:8080/health; then
            echo "Services are ready"
            break
          fi
          echo "Waiting for services... ($i/30)"
          sleep 5
        done
    
    - name: Set up Python for integration tests
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements.txt
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short
    
    - name: Collect container logs
      if: always()
      run: |
        echo "=== Orchestrator logs ==="
        docker logs orchestrator-test
        echo "=== LLM Service logs ==="
        docker logs llm-test
        echo "=== Vision Service logs ==="
        docker logs vision-test
        echo "=== NLP Service logs ==="
        docker logs nlp-test
        echo "=== Data Processor logs ==="
        docker logs data-processor-test
    
    - name: Cleanup test containers
      if: always()
      run: |
        docker stop orchestrator-test llm-test vision-test nlp-test data-processor-test || true
        docker rm orchestrator-test llm-test vision-test nlp-test data-processor-test || true
        docker network rm ai-semble-test || true

  # リリースビルド（mainブランチのみ）
  release-build:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, security-scan]
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push images
      run: |
        services=(orchestrator ai-services/llm ai-services/vision ai-services/nlp data-processor)
        for service in "${services[@]}"; do
          service_name=$(basename $service)
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --push \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service_name:latest \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service_name:${{ github.sha }} \
            containers/$service/
        done